import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { createFeedbackSave, deleteFeedbackSave } from "./feedbackSaveAPI";

const initialState = {
  saves: {},
  isLoading: false,
};

export const postFeedbackSaveAsync = createAsyncThunk(
  "feedbackSave/post",
  async (content) => {
    const response = await createFeedbackSave(content);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const deleteFeedbackSaveAsync = createAsyncThunk(
  "feedbackSave/delete",
  async (content) => {
    const response = await deleteFeedbackSave(content);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const feedbackSaveSlice = createSlice({
  name: "feedbackSave",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(postFeedbackSaveAsync.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(postFeedbackSaveAsync.fulfilled, (state, action) => {
        state.isLoading = false;
        state.saves[action.payload.id] = true;
      })
      .addCase(deleteFeedbackSaveAsync.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(deleteFeedbackSaveAsync.fulfilled, (state, action) => {
        state.isLoading = false;
        delete state.saves[action.payload.id];
      });
  },
});

// export const { increment, decrement, incrementByAmount } =
//   feedbackSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectSaves = (state) => state.saves;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default feedbackSaveSlice.reducer;
